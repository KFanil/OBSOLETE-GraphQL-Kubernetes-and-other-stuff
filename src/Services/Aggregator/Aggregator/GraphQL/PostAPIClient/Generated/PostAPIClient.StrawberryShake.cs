// <auto-generated/>
#nullable enable

namespace Generator
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CategoriesResult : global::System.IEquatable<CategoriesResult>, ICategoriesResult
    {
        public CategoriesResult(global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories> categories)
        {
            Categories = categories;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories> Categories { get; }

        public virtual global::System.Boolean Equals(CategoriesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Categories, other.Categories));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CategoriesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Categories_elm in Categories)
                {
                    hash ^= 397 * Categories_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Categories_Categories_Category : global::System.IEquatable<Categories_Categories_Category>, ICategories_Categories_Category
    {
        public Categories_Categories_Category(global::System.Int32 id, global::System.String name, global::System.String slug, global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories_Posts>>? posts)
        {
            Id = id;
            Name = name;
            Slug = slug;
            Posts = posts;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Name { get; }

        public global::System.String Slug { get; }

        /// <summary>
        /// This is the list of categories
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories_Posts>>? Posts { get; }

        public virtual global::System.Boolean Equals(Categories_Categories_Category? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Slug.Equals(other.Slug) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Posts, other.Posts);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Categories_Categories_Category)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Slug.GetHashCode();
                if (Posts != null)
                {
                    foreach (var Posts_elm in Posts)
                    {
                        foreach (var Posts_elm_elm in Posts_elm)
                        {
                            hash ^= 397 * Posts_elm_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Categories_Categories_Posts_Post : global::System.IEquatable<Categories_Categories_Posts_Post>, ICategories_Categories_Posts_Post
    {
        public Categories_Categories_Posts_Post(global::System.Int32 id, global::System.String title, global::System.String slug, global::System.String excerpt, global::System.String content, global::System.String featuredImageUrl, global::System.Boolean isFeaturedPost, global::System.Int32 authorId, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At)
        {
            Id = id;
            Title = title;
            Slug = slug;
            Excerpt = excerpt;
            Content = content;
            FeaturedImageUrl = featuredImageUrl;
            IsFeaturedPost = isFeaturedPost;
            AuthorId = authorId;
            Created_At = created_At;
            Updated_At = updated_At;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Slug { get; }

        public global::System.String Excerpt { get; }

        public global::System.String Content { get; }

        public global::System.String FeaturedImageUrl { get; }

        public global::System.Boolean IsFeaturedPost { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public virtual global::System.Boolean Equals(Categories_Categories_Posts_Post? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Title.Equals(other.Title) && Slug.Equals(other.Slug) && Excerpt.Equals(other.Excerpt) && Content.Equals(other.Content) && FeaturedImageUrl.Equals(other.FeaturedImageUrl) && IsFeaturedPost == other.IsFeaturedPost && AuthorId == other.AuthorId && Created_At.Equals(other.Created_At) && Updated_At.Equals(other.Updated_At);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Categories_Categories_Posts_Post)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Slug.GetHashCode();
                hash ^= 397 * Excerpt.GetHashCode();
                hash ^= 397 * Content.GetHashCode();
                hash ^= 397 * FeaturedImageUrl.GetHashCode();
                hash ^= 397 * IsFeaturedPost.GetHashCode();
                hash ^= 397 * AuthorId.GetHashCode();
                hash ^= 397 * Created_At.GetHashCode();
                hash ^= 397 * Updated_At.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICategoriesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories> Categories { get; }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICategories_Categories
    {
        public global::System.Int32 Id { get; }

        public global::System.String Name { get; }

        public global::System.String Slug { get; }

        /// <summary>
        /// This is the list of categories
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories_Posts>>? Posts { get; }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICategories_Categories_Category : ICategories_Categories
    {
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICategories_Categories_Posts
    {
        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Slug { get; }

        public global::System.String Excerpt { get; }

        public global::System.String Content { get; }

        public global::System.String FeaturedImageUrl { get; }

        public global::System.Boolean IsFeaturedPost { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICategories_Categories_Posts_Post : ICategories_Categories_Posts
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsResult : global::System.IEquatable<PostsResult>, IPostsResult
    {
        public PostsResult(global::Generator.IPosts_Posts? posts)
        {
            Posts = posts;
        }

        public global::Generator.IPosts_Posts? Posts { get; }

        public virtual global::System.Boolean Equals(PostsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Posts is null && other.Posts is null) || Posts != null && Posts.Equals(other.Posts)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PostsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Posts != null)
                {
                    hash ^= 397 * Posts.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Posts_Posts_PostsConnection : global::System.IEquatable<Posts_Posts_PostsConnection>, IPosts_Posts_PostsConnection
    {
        public Posts_Posts_PostsConnection(global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges>? edges)
        {
            Edges = edges;
        }

        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges>? Edges { get; }

        public virtual global::System.Boolean Equals(Posts_Posts_PostsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Edges, other.Edges));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Posts_Posts_PostsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Edges != null)
                {
                    foreach (var Edges_elm in Edges)
                    {
                        hash ^= 397 * Edges_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Posts_Posts_Edges_PostsEdge : global::System.IEquatable<Posts_Posts_Edges_PostsEdge>, IPosts_Posts_Edges_PostsEdge
    {
        public Posts_Posts_Edges_PostsEdge(global::Generator.IPosts_Posts_Edges_Node node)
        {
            Node = node;
        }

        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::Generator.IPosts_Posts_Edges_Node Node { get; }

        public virtual global::System.Boolean Equals(Posts_Posts_Edges_PostsEdge? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Node.Equals(other.Node));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Posts_Posts_Edges_PostsEdge)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Node.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Posts_Posts_Edges_Node_Post : global::System.IEquatable<Posts_Posts_Edges_Node_Post>, IPosts_Posts_Edges_Node_Post
    {
        public Posts_Posts_Edges_Node_Post(global::System.Int32 id, global::System.String title, global::System.String slug, global::System.String excerpt, global::System.String content, global::System.String featuredImageUrl, global::System.Boolean isFeaturedPost, global::System.Int32 authorId, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories>>? categories)
        {
            Id = id;
            Title = title;
            Slug = slug;
            Excerpt = excerpt;
            Content = content;
            FeaturedImageUrl = featuredImageUrl;
            IsFeaturedPost = isFeaturedPost;
            AuthorId = authorId;
            Created_At = created_At;
            Updated_At = updated_At;
            Categories = categories;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Slug { get; }

        public global::System.String Excerpt { get; }

        public global::System.String Content { get; }

        public global::System.String FeaturedImageUrl { get; }

        public global::System.Boolean IsFeaturedPost { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        /// <summary>
        /// This is the list of categories
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories>>? Categories { get; }

        public virtual global::System.Boolean Equals(Posts_Posts_Edges_Node_Post? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Title.Equals(other.Title) && Slug.Equals(other.Slug) && Excerpt.Equals(other.Excerpt) && Content.Equals(other.Content) && FeaturedImageUrl.Equals(other.FeaturedImageUrl) && IsFeaturedPost == other.IsFeaturedPost && AuthorId == other.AuthorId && Created_At.Equals(other.Created_At) && Updated_At.Equals(other.Updated_At) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Categories, other.Categories);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Posts_Posts_Edges_Node_Post)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Slug.GetHashCode();
                hash ^= 397 * Excerpt.GetHashCode();
                hash ^= 397 * Content.GetHashCode();
                hash ^= 397 * FeaturedImageUrl.GetHashCode();
                hash ^= 397 * IsFeaturedPost.GetHashCode();
                hash ^= 397 * AuthorId.GetHashCode();
                hash ^= 397 * Created_At.GetHashCode();
                hash ^= 397 * Updated_At.GetHashCode();
                if (Categories != null)
                {
                    foreach (var Categories_elm in Categories)
                    {
                        foreach (var Categories_elm_elm in Categories_elm)
                        {
                            hash ^= 397 * Categories_elm_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Posts_Posts_Edges_Node_Categories_Category : global::System.IEquatable<Posts_Posts_Edges_Node_Categories_Category>, IPosts_Posts_Edges_Node_Categories_Category
    {
        public Posts_Posts_Edges_Node_Categories_Category(global::System.Int32 id, global::System.String name, global::System.String slug)
        {
            Id = id;
            Name = name;
            Slug = slug;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Name { get; }

        public global::System.String Slug { get; }

        public virtual global::System.Boolean Equals(Posts_Posts_Edges_Node_Categories_Category? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Slug.Equals(other.Slug);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Posts_Posts_Edges_Node_Categories_Category)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Slug.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPostsResult
    {
        public global::Generator.IPosts_Posts? Posts { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts
    {
        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges>? Edges { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts_PostsConnection : IPosts_Posts
    {
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts_Edges
    {
        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::Generator.IPosts_Posts_Edges_Node Node { get; }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts_Edges_PostsEdge : IPosts_Posts_Edges
    {
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts_Edges_Node
    {
        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Slug { get; }

        public global::System.String Excerpt { get; }

        public global::System.String Content { get; }

        public global::System.String FeaturedImageUrl { get; }

        public global::System.Boolean IsFeaturedPost { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        /// <summary>
        /// This is the list of categories
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories>>? Categories { get; }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts_Edges_Node_Post : IPosts_Posts_Edges_Node
    {
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts_Edges_Node_Categories
    {
        public global::System.Int32 Id { get; }

        public global::System.String Name { get; }

        public global::System.String Slug { get; }
    }

    /// <summary>
    /// Represents the post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPosts_Posts_Edges_Node_Categories_Category : IPosts_Posts_Edges_Node_Categories
    {
    }

    /// <summary>
    /// Represents the operation service of the Categories GraphQL operation
    /// <code>
    /// query Categories {
    ///   categories {
    ///     __typename
    ///     id
    ///     name
    ///     slug
    ///     posts {
    ///       __typename
    ///       id
    ///       title
    ///       slug
    ///       excerpt
    ///       content
    ///       featuredImageUrl
    ///       isFeaturedPost
    ///       authorId
    ///       created_At
    ///       updated_At
    ///       ... on Post {
    ///         id
    ///       }
    ///     }
    ///     ... on Category {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CategoriesQueryDocument : global::StrawberryShake.IDocument
    {
        private CategoriesQueryDocument()
        {
        }

        public static CategoriesQueryDocument Instance { get; } = new CategoriesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x6c, 0x75, 0x67, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x73, 0x6c, 0x75, 0x67, 0x20, 0x65, 0x78, 0x63, 0x65, 0x72, 0x70, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "04fe67ebbff981f6091b290b62ed37c6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Categories GraphQL operation
    /// <code>
    /// query Categories {
    ///   categories {
    ///     __typename
    ///     id
    ///     name
    ///     slug
    ///     posts {
    ///       __typename
    ///       id
    ///       title
    ///       slug
    ///       excerpt
    ///       content
    ///       featuredImageUrl
    ///       isFeaturedPost
    ///       authorId
    ///       created_At
    ///       updated_At
    ///       ... on Post {
    ///         id
    ///       }
    ///     }
    ///     ... on Category {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CategoriesQuery : global::Generator.ICategoriesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICategoriesResult> _operationExecutor;
        public CategoriesQuery(global::StrawberryShake.IOperationExecutor<ICategoriesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICategoriesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICategoriesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICategoriesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CategoriesQueryDocument.Instance.Hash.Value, name: "Categories", document: CategoriesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the Categories GraphQL operation
    /// <code>
    /// query Categories {
    ///   categories {
    ///     __typename
    ///     id
    ///     name
    ///     slug
    ///     posts {
    ///       __typename
    ///       id
    ///       title
    ///       slug
    ///       excerpt
    ///       content
    ///       featuredImageUrl
    ///       isFeaturedPost
    ///       authorId
    ///       created_At
    ///       updated_At
    ///       ... on Post {
    ///         id
    ///       }
    ///     }
    ///     ... on Category {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICategoriesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICategoriesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICategoriesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the Posts GraphQL operation
    /// <code>
    /// query Posts {
    ///   posts {
    ///     __typename
    ///     edges {
    ///       __typename
    ///       node {
    ///         __typename
    ///         id
    ///         title
    ///         slug
    ///         excerpt
    ///         content
    ///         featuredImageUrl
    ///         isFeaturedPost
    ///         authorId
    ///         created_At
    ///         updated_At
    ///         categories {
    ///           __typename
    ///           id
    ///           name
    ///           slug
    ///           ... on Category {
    ///             id
    ///           }
    ///         }
    ///         ... on Post {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsQueryDocument : global::StrawberryShake.IDocument
    {
        private PostsQueryDocument()
        {
        }

        public static PostsQueryDocument Instance { get; } = new PostsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x64, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x73, 0x6c, 0x75, 0x67, 0x20, 0x65, 0x78, 0x63, 0x65, 0x72, 0x70, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x6c, 0x75, 0x67, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "97cdd325c60d85974c5941f07ecb891f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Posts GraphQL operation
    /// <code>
    /// query Posts {
    ///   posts {
    ///     __typename
    ///     edges {
    ///       __typename
    ///       node {
    ///         __typename
    ///         id
    ///         title
    ///         slug
    ///         excerpt
    ///         content
    ///         featuredImageUrl
    ///         isFeaturedPost
    ///         authorId
    ///         created_At
    ///         updated_At
    ///         categories {
    ///           __typename
    ///           id
    ///           name
    ///           slug
    ///           ... on Category {
    ///             id
    ///           }
    ///         }
    ///         ... on Post {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsQuery : global::Generator.IPostsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPostsResult> _operationExecutor;
        public PostsQuery(global::StrawberryShake.IOperationExecutor<IPostsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPostsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPostsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPostsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PostsQueryDocument.Instance.Hash.Value, name: "Posts", document: PostsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the Posts GraphQL operation
    /// <code>
    /// query Posts {
    ///   posts {
    ///     __typename
    ///     edges {
    ///       __typename
    ///       node {
    ///         __typename
    ///         id
    ///         title
    ///         slug
    ///         excerpt
    ///         content
    ///         featuredImageUrl
    ///         isFeaturedPost
    ///         authorId
    ///         created_At
    ///         updated_At
    ///         categories {
    ///           __typename
    ///           id
    ///           name
    ///           slug
    ///           ... on Category {
    ///             id
    ///           }
    ///         }
    ///         ... on Post {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPostsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPostsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPostsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the PostAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostAPIClient : global::Generator.IPostAPIClient
    {
        private readonly global::Generator.ICategoriesQuery _categories;
        private readonly global::Generator.IPostsQuery _posts;
        public PostAPIClient(global::Generator.ICategoriesQuery categories, global::Generator.IPostsQuery posts)
        {
            _categories = categories ?? throw new global::System.ArgumentNullException(nameof(categories));
            _posts = posts ?? throw new global::System.ArgumentNullException(nameof(posts));
        }

        public static global::System.String ClientName => "PostAPIClient";
        public global::Generator.ICategoriesQuery Categories => _categories;
        public global::Generator.IPostsQuery Posts => _posts;
    }

    /// <summary>
    /// Represents the PostAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IPostAPIClient
    {
        global::Generator.ICategoriesQuery Categories { get; }

        global::Generator.IPostsQuery Posts { get; }
    }
}

namespace Generator.State
{
    ///<summary>Represents the post.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CategoryEntity
    {
        public CategoryEntity(global::System.Int32 id = default !, global::System.String name = default !, global::System.String slug = default !, global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? posts = default !)
        {
            Id = id;
            Name = name;
            Slug = slug;
            Posts = posts;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Name { get; }

        public global::System.String Slug { get; }

        ///<summary>This is the list of categories</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? Posts { get; }
    }

    ///<summary>Represents the post.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostEntity
    {
        public PostEntity(global::System.Int32 id = default !, global::System.String title = default !, global::System.String slug = default !, global::System.String excerpt = default !, global::System.String content = default !, global::System.String featuredImageUrl = default !, global::System.Boolean isFeaturedPost = default !, global::System.Int32 authorId = default !, global::System.DateTimeOffset created_At = default !, global::System.DateTimeOffset updated_At = default !, global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? categories = default !)
        {
            Id = id;
            Title = title;
            Slug = slug;
            Excerpt = excerpt;
            Content = content;
            FeaturedImageUrl = featuredImageUrl;
            IsFeaturedPost = isFeaturedPost;
            AuthorId = authorId;
            Created_At = created_At;
            Updated_At = updated_At;
            Categories = categories;
        }

        public global::System.Int32 Id { get; }

        public global::System.String Title { get; }

        public global::System.String Slug { get; }

        public global::System.String Excerpt { get; }

        public global::System.String Content { get; }

        public global::System.String FeaturedImageUrl { get; }

        public global::System.Boolean IsFeaturedPost { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        ///<summary>This is the list of categories</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? Categories { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CategoriesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Generator.CategoriesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Categories_Categories_Category> _categories_Categories_CategoryFromCategoryEntityMapper;
        public CategoriesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Categories_Categories_Category> categories_Categories_CategoryFromCategoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _categories_Categories_CategoryFromCategoryEntityMapper = categories_Categories_CategoryFromCategoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(categories_Categories_CategoryFromCategoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Generator.ICategoriesResult);
        public CategoriesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CategoriesResultInfo info)
            {
                return new CategoriesResult(MapNonNullableICategories_CategoriesNonNullableArray(info.Categories, snapshot));
            }

            throw new global::System.ArgumentException("CategoriesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories> MapNonNullableICategories_CategoriesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var categorys = new global::System.Collections.Generic.List<global::Generator.ICategories_Categories>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                categorys.Add(MapNonNullableICategories_Categories(child, snapshot));
            }

            return categorys;
        }

        private global::Generator.ICategories_Categories MapNonNullableICategories_Categories(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Category", global::System.StringComparison.Ordinal))
            {
                return _categories_Categories_CategoryFromCategoryEntityMapper.Map(snapshot.GetEntity<global::Generator.State.CategoryEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CategoriesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CategoriesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> categories, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Categories = categories;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Categories { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CategoriesResultInfo(Categories, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Categories_Categories_CategoryFromCategoryEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Categories_Categories_Category>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, Categories_Categories_Posts_Post> _categories_Categories_Posts_PostFromPostEntityMapper;
        public Categories_Categories_CategoryFromCategoryEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, Categories_Categories_Posts_Post> categories_Categories_Posts_PostFromPostEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _categories_Categories_Posts_PostFromPostEntityMapper = categories_Categories_Posts_PostFromPostEntityMapper ?? throw new global::System.ArgumentNullException(nameof(categories_Categories_Posts_PostFromPostEntityMapper));
        }

        public Categories_Categories_Category Map(global::Generator.State.CategoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Categories_Categories_Category(entity.Id, entity.Name, entity.Slug, MapICategories_Categories_PostsNonNullableArrayNonNullableArray(entity.Posts, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories_Posts>>? MapICategories_Categories_PostsNonNullableArrayNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var posts = new global::System.Collections.Generic.List<global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories_Posts>>();
            foreach (global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> child in list)
            {
                posts.Add(MapNonNullableICategories_Categories_PostsNonNullableArray(child, snapshot));
            }

            return posts;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.ICategories_Categories_Posts> MapNonNullableICategories_Categories_PostsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var posts = new global::System.Collections.Generic.List<global::Generator.ICategories_Categories_Posts>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                posts.Add(MapNonNullableICategories_Categories_Posts(child, snapshot));
            }

            return posts;
        }

        private global::Generator.ICategories_Categories_Posts MapNonNullableICategories_Categories_Posts(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Post", global::System.StringComparison.Ordinal))
            {
                return _categories_Categories_Posts_PostFromPostEntityMapper.Map(snapshot.GetEntity<global::Generator.State.PostEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Categories_Categories_Posts_PostFromPostEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, Categories_Categories_Posts_Post>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Categories_Categories_Posts_PostFromPostEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Categories_Categories_Posts_Post Map(global::Generator.State.PostEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Categories_Categories_Posts_Post(entity.Id, entity.Title, entity.Slug, entity.Excerpt, entity.Content, entity.FeaturedImageUrl, entity.IsFeaturedPost, entity.AuthorId, entity.Created_At, entity.Updated_At);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Generator.PostsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, Posts_Posts_Edges_Node_Post> _posts_Posts_Edges_Node_PostFromPostEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Posts_Posts_Edges_Node_Categories_Category> _posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper;
        public PostsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, Posts_Posts_Edges_Node_Post> posts_Posts_Edges_Node_PostFromPostEntityMapper, global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Posts_Posts_Edges_Node_Categories_Category> posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _posts_Posts_Edges_Node_PostFromPostEntityMapper = posts_Posts_Edges_Node_PostFromPostEntityMapper ?? throw new global::System.ArgumentNullException(nameof(posts_Posts_Edges_Node_PostFromPostEntityMapper));
            _posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper = posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Generator.IPostsResult);
        public PostsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PostsResultInfo info)
            {
                return new PostsResult(MapIPosts_Posts(info.Posts, snapshot));
            }

            throw new global::System.ArgumentException("PostsResultInfo expected.");
        }

        private global::Generator.IPosts_Posts? MapIPosts_Posts(global::Generator.State.PostsConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IPosts_Posts returnValue = default !;
            if (data?.__typename.Equals("PostsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new Posts_Posts_PostsConnection(MapIPosts_Posts_EdgesNonNullableArray(data.Edges, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges>? MapIPosts_Posts_EdgesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Generator.State.PostsEdgeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var postsEdges = new global::System.Collections.Generic.List<global::Generator.IPosts_Posts_Edges>();
            foreach (global::Generator.State.PostsEdgeData child in list)
            {
                postsEdges.Add(MapNonNullableIPosts_Posts_Edges(child, snapshot));
            }

            return postsEdges;
        }

        private global::Generator.IPosts_Posts_Edges MapNonNullableIPosts_Posts_Edges(global::Generator.State.PostsEdgeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPosts_Posts_Edges returnValue = default !;
            if (data.__typename.Equals("PostsEdge", global::System.StringComparison.Ordinal))
            {
                returnValue = new Posts_Posts_Edges_PostsEdge(MapNonNullableIPosts_Posts_Edges_Node(data.Node ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Generator.IPosts_Posts_Edges_Node MapNonNullableIPosts_Posts_Edges_Node(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Post", global::System.StringComparison.Ordinal))
            {
                return _posts_Posts_Edges_Node_PostFromPostEntityMapper.Map(snapshot.GetEntity<global::Generator.State.PostEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories>>? MapIPosts_Posts_Edges_Node_CategoriesNonNullableArrayNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var categorys = new global::System.Collections.Generic.List<global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories>>();
            foreach (global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> child in list)
            {
                categorys.Add(MapNonNullableIPosts_Posts_Edges_Node_CategoriesNonNullableArray(child, snapshot));
            }

            return categorys;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories> MapNonNullableIPosts_Posts_Edges_Node_CategoriesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var categorys = new global::System.Collections.Generic.List<global::Generator.IPosts_Posts_Edges_Node_Categories>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                categorys.Add(MapNonNullableIPosts_Posts_Edges_Node_Categories(child, snapshot));
            }

            return categorys;
        }

        private global::Generator.IPosts_Posts_Edges_Node_Categories MapNonNullableIPosts_Posts_Edges_Node_Categories(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Category", global::System.StringComparison.Ordinal))
            {
                return _posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper.Map(snapshot.GetEntity<global::Generator.State.CategoryEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PostsResultInfo(global::Generator.State.PostsConnectionData? posts, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Posts = posts;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Generator.State.PostsConnectionData? Posts { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PostsResultInfo(Posts, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Posts_Posts_Edges_Node_PostFromPostEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, Posts_Posts_Edges_Node_Post>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Posts_Posts_Edges_Node_Categories_Category> _posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper;
        public Posts_Posts_Edges_Node_PostFromPostEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Posts_Posts_Edges_Node_Categories_Category> posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper = posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper));
        }

        public Posts_Posts_Edges_Node_Post Map(global::Generator.State.PostEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Posts_Posts_Edges_Node_Post(entity.Id, entity.Title, entity.Slug, entity.Excerpt, entity.Content, entity.FeaturedImageUrl, entity.IsFeaturedPost, entity.AuthorId, entity.Created_At, entity.Updated_At, MapIPosts_Posts_Edges_Node_CategoriesNonNullableArrayNonNullableArray(entity.Categories, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories>>? MapIPosts_Posts_Edges_Node_CategoriesNonNullableArrayNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var categorys = new global::System.Collections.Generic.List<global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories>>();
            foreach (global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> child in list)
            {
                categorys.Add(MapNonNullableIPosts_Posts_Edges_Node_CategoriesNonNullableArray(child, snapshot));
            }

            return categorys;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.IPosts_Posts_Edges_Node_Categories> MapNonNullableIPosts_Posts_Edges_Node_CategoriesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var categorys = new global::System.Collections.Generic.List<global::Generator.IPosts_Posts_Edges_Node_Categories>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                categorys.Add(MapNonNullableIPosts_Posts_Edges_Node_Categories(child, snapshot));
            }

            return categorys;
        }

        private global::Generator.IPosts_Posts_Edges_Node_Categories MapNonNullableIPosts_Posts_Edges_Node_Categories(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Category", global::System.StringComparison.Ordinal))
            {
                return _posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper.Map(snapshot.GetEntity<global::Generator.State.CategoryEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, Posts_Posts_Edges_Node_Categories_Category>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Posts_Posts_Edges_Node_Categories_Category Map(global::Generator.State.CategoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Posts_Posts_Edges_Node_Categories_Category(entity.Id, entity.Name, entity.Slug);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CategoriesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.ICategoriesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICategoriesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public CategoriesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICategoriesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<ICategoriesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICategoriesResult Result, CategoriesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICategoriesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICategoriesResult, CategoriesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> categoriesId = default !;
            _entityStore.Update(session =>
            {
                categoriesId = UpdateNonNullableICategories_CategoriesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categories"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CategoriesResultInfo(categoriesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableICategories_CategoriesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var categorys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                categorys.Add(UpdateNonNullableICategories_CategoriesEntity(session, child, entityIds));
            }

            return categorys;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableICategories_CategoriesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Category", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.CategoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.CategoryEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), UpdateICategories_Categories_PostsEntityNonNullableArrayNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "posts"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.CategoryEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), UpdateICategories_Categories_PostsEntityNonNullableArrayNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "posts"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? UpdateICategories_Categories_PostsEntityNonNullableArrayNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var posts = new global::System.Collections.Generic.List<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                posts.Add(UpdateNonNullableICategories_Categories_PostsEntityNonNullableArray(session, child, entityIds));
            }

            return posts;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableICategories_Categories_PostsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var posts = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                posts.Add(UpdateNonNullableICategories_Categories_PostsEntity(session, child, entityIds));
            }

            return posts;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableICategories_Categories_PostsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Post", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.PostEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.PostEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "excerpt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "featuredImageUrl")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFeaturedPost")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), entity.Categories));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.PostEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "excerpt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "featuredImageUrl")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFeaturedPost")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IPostsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Generator.IPostsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public PostsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Generator.IPostsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IPostsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPostsResult Result, PostsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPostsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPostsResult, PostsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Generator.State.PostsConnectionData? postsId = default !;
            _entityStore.Update(session =>
            {
                postsId = DeserializeIPosts_Posts(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "posts"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PostsResultInfo(postsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Generator.State.PostsConnectionData? DeserializeIPosts_Posts(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PostsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Generator.State.PostsConnectionData(typename, edges: DeserializeIPosts_Posts_EdgesNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "edges"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.State.PostsEdgeData>? DeserializeIPosts_Posts_EdgesNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var postsEdges = new global::System.Collections.Generic.List<global::Generator.State.PostsEdgeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                postsEdges.Add(DeserializeNonNullableIPosts_Posts_Edges(session, child, entityIds));
            }

            return postsEdges;
        }

        private global::Generator.State.PostsEdgeData DeserializeNonNullableIPosts_Posts_Edges(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PostsEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Generator.State.PostsEdgeData(typename, node: UpdateNonNullableIPosts_Posts_Edges_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIPosts_Posts_Edges_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Post", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.PostEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.PostEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "excerpt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "featuredImageUrl")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFeaturedPost")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), UpdateIPosts_Posts_Edges_Node_CategoriesEntityNonNullableArrayNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categories"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.PostEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "excerpt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "featuredImageUrl")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFeaturedPost")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), UpdateIPosts_Posts_Edges_Node_CategoriesEntityNonNullableArrayNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categories"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>? UpdateIPosts_Posts_Edges_Node_CategoriesEntityNonNullableArrayNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var categorys = new global::System.Collections.Generic.List<global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                categorys.Add(UpdateNonNullableIPosts_Posts_Edges_Node_CategoriesEntityNonNullableArray(session, child, entityIds));
            }

            return categorys;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIPosts_Posts_Edges_Node_CategoriesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var categorys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                categorys.Add(UpdateNonNullableIPosts_Posts_Edges_Node_CategoriesEntity(session, child, entityIds));
            }

            return categorys;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIPosts_Posts_Edges_Node_CategoriesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Category", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.CategoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.CategoryEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), entity.Posts));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.CategoryEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "slug")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsConnectionData
    {
        public PostsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Generator.State.PostsEdgeData>? edges = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Edges = edges;
        }

        public global::System.String __typename { get; }

        ///<summary>A list of edges.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Generator.State.PostsEdgeData>? Edges { get; }
    }

    ///<summary>An edge in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostsEdgeData
    {
        public PostsEdgeData(global::System.String __typename, global::StrawberryShake.EntityId? node = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Node = node;
        }

        public global::System.String __typename { get; }

        ///<summary>The item at the end of the edge.</summary>
        public global::StrawberryShake.EntityId? Node { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostAPIClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Category" => ParseCategoryEntityId(obj, __typename),
                "Post" => ParsePostEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Category" => FormatCategoryEntityId(entityId),
                "Post" => FormatPostEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseCategoryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCategoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePostEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatPostEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class PostAPIClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public PostAPIClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public static partial class PostAPIClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Generator.State.PostAPIClientStoreAccessor> AddPostAPIClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Generator.State.PostAPIClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.CategoriesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.PostsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.PostAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.IPostAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Generator.State.PostAPIClientStoreAccessor>("PostAPIClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("PostAPIClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, global::Generator.Categories_Categories_Category>, global::Generator.State.Categories_Categories_CategoryFromCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, global::Generator.Categories_Categories_Posts_Post>, global::Generator.State.Categories_Categories_Posts_PostFromPostEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.PostEntity, global::Generator.Posts_Posts_Edges_Node_Post>, global::Generator.State.Posts_Posts_Edges_Node_PostFromPostEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.CategoryEntity, global::Generator.Posts_Posts_Edges_Node_Categories_Category>, global::Generator.State.Posts_Posts_Edges_Node_Categories_CategoryFromCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICategoriesResult>, global::Generator.State.CategoriesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICategoriesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.ICategoriesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.ICategoriesResult>, global::Generator.State.CategoriesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Generator.ICategoriesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Generator.ICategoriesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.ICategoriesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.CategoriesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.ICategoriesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.CategoriesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IPostsResult>, global::Generator.State.PostsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IPostsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.IPostsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IPostsResult>, global::Generator.State.PostsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Generator.IPostsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Generator.IPostsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IPostsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.PostsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.IPostsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.PostsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Generator.State.PostAPIClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.PostAPIClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.IPostAPIClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.PostAPIClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
