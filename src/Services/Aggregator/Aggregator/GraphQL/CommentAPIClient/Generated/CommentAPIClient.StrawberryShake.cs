// <auto-generated/>
#nullable enable

namespace Generator
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddCommentResult : global::System.IEquatable<AddCommentResult>, IAddCommentResult
    {
        public AddCommentResult(global::Generator.IAddComment_AddComment addComment)
        {
            AddComment = addComment;
        }

        public global::Generator.IAddComment_AddComment AddComment { get; }

        public virtual global::System.Boolean Equals(AddCommentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddComment.Equals(other.AddComment));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddCommentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddComment.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddComment_AddComment_Comment : global::System.IEquatable<AddComment_AddComment_Comment>, IAddComment_AddComment_Comment
    {
        public AddComment_AddComment_Comment(global::System.Int32 id, global::System.Int32 authorId, global::System.Int32 postId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::System.String path)
        {
            Id = id;
            AuthorId = authorId;
            PostId = postId;
            Content = content;
            Created_At = created_At;
            Updated_At = updated_At;
            Path = path;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }

        public virtual global::System.Boolean Equals(AddComment_AddComment_Comment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && AuthorId == other.AuthorId && PostId == other.PostId && Content.Equals(other.Content) && Created_At.Equals(other.Created_At) && Updated_At.Equals(other.Updated_At) && Path.Equals(other.Path);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddComment_AddComment_Comment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * AuthorId.GetHashCode();
                hash ^= 397 * PostId.GetHashCode();
                hash ^= 397 * Content.GetHashCode();
                hash ^= 397 * Created_At.GetHashCode();
                hash ^= 397 * Updated_At.GetHashCode();
                hash ^= 397 * Path.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IAddCommentResult
    {
        public global::Generator.IAddComment_AddComment AddComment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IAddComment_AddComment
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IAddComment_AddComment_Comment : IAddComment_AddComment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentsResult : global::System.IEquatable<CommentsResult>, ICommentsResult
    {
        public CommentsResult(global::System.Collections.Generic.IReadOnlyList<global::Generator.IComments_Comments> comments)
        {
            Comments = comments;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IComments_Comments> Comments { get; }

        public virtual global::System.Boolean Equals(CommentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Comments, other.Comments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CommentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Comments_elm in Comments)
                {
                    hash ^= 397 * Comments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Comments_Comments_Comment : global::System.IEquatable<Comments_Comments_Comment>, IComments_Comments_Comment
    {
        public Comments_Comments_Comment(global::System.Int32 id, global::System.Int32 authorId, global::System.Int32 postId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::System.String path)
        {
            Id = id;
            AuthorId = authorId;
            PostId = postId;
            Content = content;
            Created_At = created_At;
            Updated_At = updated_At;
            Path = path;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }

        public virtual global::System.Boolean Equals(Comments_Comments_Comment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && AuthorId == other.AuthorId && PostId == other.PostId && Content.Equals(other.Content) && Created_At.Equals(other.Created_At) && Updated_At.Equals(other.Updated_At) && Path.Equals(other.Path);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Comments_Comments_Comment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * AuthorId.GetHashCode();
                hash ^= 397 * PostId.GetHashCode();
                hash ^= 397 * Content.GetHashCode();
                hash ^= 397 * Created_At.GetHashCode();
                hash ^= 397 * Updated_At.GetHashCode();
                hash ^= 397 * Path.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICommentsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IComments_Comments> Comments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IComments_Comments
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IComments_Comments_Comment : IComments_Comments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorIdResult : global::System.IEquatable<GetCommentsByAuthorIdResult>, IGetCommentsByAuthorIdResult
    {
        public GetCommentsByAuthorIdResult(global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByAuthorId_CommentsByAuthorId> commentsByAuthorId)
        {
            CommentsByAuthorId = commentsByAuthorId;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByAuthorId_CommentsByAuthorId> CommentsByAuthorId { get; }

        public virtual global::System.Boolean Equals(GetCommentsByAuthorIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CommentsByAuthorId, other.CommentsByAuthorId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCommentsByAuthorIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var CommentsByAuthorId_elm in CommentsByAuthorId)
                {
                    hash ^= 397 * CommentsByAuthorId_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorId_CommentsByAuthorId_Comment : global::System.IEquatable<GetCommentsByAuthorId_CommentsByAuthorId_Comment>, IGetCommentsByAuthorId_CommentsByAuthorId_Comment
    {
        public GetCommentsByAuthorId_CommentsByAuthorId_Comment(global::System.Int32 id, global::System.Int32 authorId, global::System.Int32 postId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::System.String path)
        {
            Id = id;
            AuthorId = authorId;
            PostId = postId;
            Content = content;
            Created_At = created_At;
            Updated_At = updated_At;
            Path = path;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }

        public virtual global::System.Boolean Equals(GetCommentsByAuthorId_CommentsByAuthorId_Comment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && AuthorId == other.AuthorId && PostId == other.PostId && Content.Equals(other.Content) && Created_At.Equals(other.Created_At) && Updated_At.Equals(other.Updated_At) && Path.Equals(other.Path);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCommentsByAuthorId_CommentsByAuthorId_Comment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * AuthorId.GetHashCode();
                hash ^= 397 * PostId.GetHashCode();
                hash ^= 397 * Content.GetHashCode();
                hash ^= 397 * Created_At.GetHashCode();
                hash ^= 397 * Updated_At.GetHashCode();
                hash ^= 397 * Path.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByAuthorIdResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByAuthorId_CommentsByAuthorId> CommentsByAuthorId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByAuthorId_CommentsByAuthorId
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByAuthorId_CommentsByAuthorId_Comment : IGetCommentsByAuthorId_CommentsByAuthorId
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostIdResult : global::System.IEquatable<GetCommentsByPostIdResult>, IGetCommentsByPostIdResult
    {
        public GetCommentsByPostIdResult(global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByPostId_CommentsByPostId> commentsByPostId)
        {
            CommentsByPostId = commentsByPostId;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByPostId_CommentsByPostId> CommentsByPostId { get; }

        public virtual global::System.Boolean Equals(GetCommentsByPostIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CommentsByPostId, other.CommentsByPostId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCommentsByPostIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var CommentsByPostId_elm in CommentsByPostId)
                {
                    hash ^= 397 * CommentsByPostId_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostId_CommentsByPostId_Comment : global::System.IEquatable<GetCommentsByPostId_CommentsByPostId_Comment>, IGetCommentsByPostId_CommentsByPostId_Comment
    {
        public GetCommentsByPostId_CommentsByPostId_Comment(global::System.Int32 id, global::System.Int32 authorId, global::System.Int32 postId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::System.String path)
        {
            Id = id;
            AuthorId = authorId;
            PostId = postId;
            Content = content;
            Created_At = created_At;
            Updated_At = updated_At;
            Path = path;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }

        public virtual global::System.Boolean Equals(GetCommentsByPostId_CommentsByPostId_Comment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && AuthorId == other.AuthorId && PostId == other.PostId && Content.Equals(other.Content) && Created_At.Equals(other.Created_At) && Updated_At.Equals(other.Updated_At) && Path.Equals(other.Path);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCommentsByPostId_CommentsByPostId_Comment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * AuthorId.GetHashCode();
                hash ^= 397 * PostId.GetHashCode();
                hash ^= 397 * Content.GetHashCode();
                hash ^= 397 * Created_At.GetHashCode();
                hash ^= 397 * Updated_At.GetHashCode();
                hash ^= 397 * Path.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByPostIdResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByPostId_CommentsByPostId> CommentsByPostId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByPostId_CommentsByPostId
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByPostId_CommentsByPostId_Comment : IGetCommentsByPostId_CommentsByPostId
    {
    }

    /// <summary>
    /// Represents the operation service of the AddComment GraphQL operation
    /// <code>
    /// mutation AddComment($postId: Int!, $authorId: Int!, $content: String!, $created_At: DateTime!, $updated_At: DateTime!) {
    ///   addComment(commentInput: { postId: $postId, authorId: $authorId, content: $content, created_At: $created_At, updated_At: $updated_At }) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddCommentMutationDocument : global::StrawberryShake.IDocument
    {
        private AddCommentMutationDocument()
        {
        }

        public static AddCommentMutationDocument Instance { get; } = new AddCommentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x21, 0x2c, 0x20, 0x24, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x3a, 0x20, 0x24, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "aaaaff0c7ac02d3b6968118691dde63e");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddComment GraphQL operation
    /// <code>
    /// mutation AddComment($postId: Int!, $authorId: Int!, $content: String!, $created_At: DateTime!, $updated_At: DateTime!) {
    ///   addComment(commentInput: { postId: $postId, authorId: $authorId, content: $content, created_At: $created_At, updated_At: $updated_At }) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddCommentMutation : global::Generator.IAddCommentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddCommentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter;
        public AddCommentMutation(global::StrawberryShake.IOperationExecutor<IAddCommentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddCommentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddCommentResult>> ExecuteAsync(global::System.Int32 postId, global::System.Int32 authorId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(postId, authorId, content, created_At, updated_At);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddCommentResult>> Watch(global::System.Int32 postId, global::System.Int32 authorId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(postId, authorId, content, created_At, updated_At);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 postId, global::System.Int32 authorId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("postId", FormatPostId(postId));
            variables.Add("authorId", FormatAuthorId(authorId));
            variables.Add("content", FormatContent(content));
            variables.Add("created_At", FormatCreated_At(created_At));
            variables.Add("updated_At", FormatUpdated_At(updated_At));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddCommentMutationDocument.Instance.Hash.Value, name: "AddComment", document: AddCommentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPostId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatAuthorId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatContent(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCreated_At(global::System.DateTimeOffset value)
        {
            return _dateTimeFormatter.Format(value);
        }

        private global::System.Object? FormatUpdated_At(global::System.DateTimeOffset value)
        {
            return _dateTimeFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddComment GraphQL operation
    /// <code>
    /// mutation AddComment($postId: Int!, $authorId: Int!, $content: String!, $created_At: DateTime!, $updated_At: DateTime!) {
    ///   addComment(commentInput: { postId: $postId, authorId: $authorId, content: $content, created_At: $created_At, updated_At: $updated_At }) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IAddCommentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddCommentResult>> ExecuteAsync(global::System.Int32 postId, global::System.Int32 authorId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddCommentResult>> Watch(global::System.Int32 postId, global::System.Int32 authorId, global::System.String content, global::System.DateTimeOffset created_At, global::System.DateTimeOffset updated_At, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the Comments GraphQL operation
    /// <code>
    /// query Comments {
    ///   comments {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentsQueryDocument : global::StrawberryShake.IDocument
    {
        private CommentsQueryDocument()
        {
        }

        public static CommentsQueryDocument Instance { get; } = new CommentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ae7399be7435be42d569fcfb4fb55d12");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Comments GraphQL operation
    /// <code>
    /// query Comments {
    ///   comments {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentsQuery : global::Generator.ICommentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICommentsResult> _operationExecutor;
        public CommentsQuery(global::StrawberryShake.IOperationExecutor<ICommentsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICommentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICommentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICommentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CommentsQueryDocument.Instance.Hash.Value, name: "Comments", document: CommentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the Comments GraphQL operation
    /// <code>
    /// query Comments {
    ///   comments {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICommentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICommentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICommentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCommentsByAuthorId GraphQL operation
    /// <code>
    /// query GetCommentsByAuthorId($authorId: Int!) {
    ///   commentsByAuthorId(authorId: $authorId) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCommentsByAuthorIdQueryDocument()
        {
        }

        public static GetCommentsByAuthorIdQueryDocument Instance { get; } = new GetCommentsByAuthorIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x28, 0x24, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x28, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "694d267a34a55a6d8606483991d9b140");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCommentsByAuthorId GraphQL operation
    /// <code>
    /// query GetCommentsByAuthorId($authorId: Int!) {
    ///   commentsByAuthorId(authorId: $authorId) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorIdQuery : global::Generator.IGetCommentsByAuthorIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCommentsByAuthorIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetCommentsByAuthorIdQuery(global::StrawberryShake.IOperationExecutor<IGetCommentsByAuthorIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCommentsByAuthorIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCommentsByAuthorIdResult>> ExecuteAsync(global::System.Int32 authorId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(authorId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCommentsByAuthorIdResult>> Watch(global::System.Int32 authorId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(authorId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 authorId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("authorId", FormatAuthorId(authorId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCommentsByAuthorIdQueryDocument.Instance.Hash.Value, name: "GetCommentsByAuthorId", document: GetCommentsByAuthorIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAuthorId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCommentsByAuthorId GraphQL operation
    /// <code>
    /// query GetCommentsByAuthorId($authorId: Int!) {
    ///   commentsByAuthorId(authorId: $authorId) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByAuthorIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCommentsByAuthorIdResult>> ExecuteAsync(global::System.Int32 authorId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCommentsByAuthorIdResult>> Watch(global::System.Int32 authorId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCommentsByPostId GraphQL operation
    /// <code>
    /// query GetCommentsByPostId($postId: Int!) {
    ///   commentsByPostId(postId: $postId) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCommentsByPostIdQueryDocument()
        {
        }

        public static GetCommentsByPostIdQueryDocument Instance { get; } = new GetCommentsByPostIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x28, 0x24, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x28, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x41, 0x74, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "00572d2f77e8dfaa1c41b804c84659fa");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCommentsByPostId GraphQL operation
    /// <code>
    /// query GetCommentsByPostId($postId: Int!) {
    ///   commentsByPostId(postId: $postId) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostIdQuery : global::Generator.IGetCommentsByPostIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCommentsByPostIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetCommentsByPostIdQuery(global::StrawberryShake.IOperationExecutor<IGetCommentsByPostIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCommentsByPostIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCommentsByPostIdResult>> ExecuteAsync(global::System.Int32 postId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(postId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCommentsByPostIdResult>> Watch(global::System.Int32 postId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(postId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 postId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("postId", FormatPostId(postId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCommentsByPostIdQueryDocument.Instance.Hash.Value, name: "GetCommentsByPostId", document: GetCommentsByPostIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPostId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCommentsByPostId GraphQL operation
    /// <code>
    /// query GetCommentsByPostId($postId: Int!) {
    ///   commentsByPostId(postId: $postId) {
    ///     __typename
    ///     id
    ///     authorId
    ///     postId
    ///     content
    ///     created_At
    ///     updated_At
    ///     path
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface IGetCommentsByPostIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCommentsByPostIdResult>> ExecuteAsync(global::System.Int32 postId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCommentsByPostIdResult>> Watch(global::System.Int32 postId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CommentAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentAPIClient : global::Generator.ICommentAPIClient
    {
        private readonly global::Generator.IAddCommentMutation _addComment;
        private readonly global::Generator.ICommentsQuery _comments;
        private readonly global::Generator.IGetCommentsByAuthorIdQuery _getCommentsByAuthorId;
        private readonly global::Generator.IGetCommentsByPostIdQuery _getCommentsByPostId;
        public CommentAPIClient(global::Generator.IAddCommentMutation addComment, global::Generator.ICommentsQuery comments, global::Generator.IGetCommentsByAuthorIdQuery getCommentsByAuthorId, global::Generator.IGetCommentsByPostIdQuery getCommentsByPostId)
        {
            _addComment = addComment ?? throw new global::System.ArgumentNullException(nameof(addComment));
            _comments = comments ?? throw new global::System.ArgumentNullException(nameof(comments));
            _getCommentsByAuthorId = getCommentsByAuthorId ?? throw new global::System.ArgumentNullException(nameof(getCommentsByAuthorId));
            _getCommentsByPostId = getCommentsByPostId ?? throw new global::System.ArgumentNullException(nameof(getCommentsByPostId));
        }

        public static global::System.String ClientName => "CommentAPIClient";
        public global::Generator.IAddCommentMutation AddComment => _addComment;
        public global::Generator.ICommentsQuery Comments => _comments;
        public global::Generator.IGetCommentsByAuthorIdQuery GetCommentsByAuthorId => _getCommentsByAuthorId;
        public global::Generator.IGetCommentsByPostIdQuery GetCommentsByPostId => _getCommentsByPostId;
    }

    /// <summary>
    /// Represents the CommentAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial interface ICommentAPIClient
    {
        global::Generator.IAddCommentMutation AddComment { get; }

        global::Generator.ICommentsQuery Comments { get; }

        global::Generator.IGetCommentsByAuthorIdQuery GetCommentsByAuthorId { get; }

        global::Generator.IGetCommentsByPostIdQuery GetCommentsByPostId { get; }
    }
}

namespace Generator.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentEntity
    {
        public CommentEntity(global::System.Int32 id = default !, global::System.Int32 authorId = default !, global::System.Int32 postId = default !, global::System.String content = default !, global::System.DateTimeOffset created_At = default !, global::System.DateTimeOffset updated_At = default !, global::System.String path = default !)
        {
            Id = id;
            AuthorId = authorId;
            PostId = postId;
            Content = content;
            Created_At = created_At;
            Updated_At = updated_At;
            Path = path;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 AuthorId { get; }

        public global::System.Int32 PostId { get; }

        public global::System.String Content { get; }

        public global::System.DateTimeOffset Created_At { get; }

        public global::System.DateTimeOffset Updated_At { get; }

        public global::System.String Path { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddCommentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Generator.AddCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, AddComment_AddComment_Comment> _addComment_AddComment_CommentFromCommentEntityMapper;
        public AddCommentResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, AddComment_AddComment_Comment> addComment_AddComment_CommentFromCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addComment_AddComment_CommentFromCommentEntityMapper = addComment_AddComment_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addComment_AddComment_CommentFromCommentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Generator.IAddCommentResult);
        public AddCommentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddCommentResultInfo info)
            {
                return new AddCommentResult(MapNonNullableIAddComment_AddComment(info.AddComment, snapshot));
            }

            throw new global::System.ArgumentException("AddCommentResultInfo expected.");
        }

        private global::Generator.IAddComment_AddComment MapNonNullableIAddComment_AddComment(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                return _addComment_AddComment_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Generator.State.CommentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddCommentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddCommentResultInfo(global::StrawberryShake.EntityId addComment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddComment = addComment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId AddComment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddCommentResultInfo(AddComment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddComment_AddComment_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, AddComment_AddComment_Comment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddComment_AddComment_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddComment_AddComment_Comment Map(global::Generator.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddComment_AddComment_Comment(entity.Id, entity.AuthorId, entity.PostId, entity.Content, entity.Created_At, entity.Updated_At, entity.Path);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Generator.CommentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, Comments_Comments_Comment> _comments_Comments_CommentFromCommentEntityMapper;
        public CommentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, Comments_Comments_Comment> comments_Comments_CommentFromCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _comments_Comments_CommentFromCommentEntityMapper = comments_Comments_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(comments_Comments_CommentFromCommentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Generator.ICommentsResult);
        public CommentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CommentsResultInfo info)
            {
                return new CommentsResult(MapNonNullableIComments_CommentsNonNullableArray(info.Comments, snapshot));
            }

            throw new global::System.ArgumentException("CommentsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.IComments_Comments> MapNonNullableIComments_CommentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var comments = new global::System.Collections.Generic.List<global::Generator.IComments_Comments>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                comments.Add(MapNonNullableIComments_Comments(child, snapshot));
            }

            return comments;
        }

        private global::Generator.IComments_Comments MapNonNullableIComments_Comments(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                return _comments_Comments_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Generator.State.CommentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CommentsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> comments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Comments = comments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Comments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CommentsResultInfo(Comments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class Comments_Comments_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, Comments_Comments_Comment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Comments_Comments_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Comments_Comments_Comment Map(global::Generator.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Comments_Comments_Comment(entity.Id, entity.AuthorId, entity.PostId, entity.Content, entity.Created_At, entity.Updated_At, entity.Path);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Generator.GetCommentsByAuthorIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, GetCommentsByAuthorId_CommentsByAuthorId_Comment> _getCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper;
        public GetCommentsByAuthorIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, GetCommentsByAuthorId_CommentsByAuthorId_Comment> getCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper = getCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Generator.IGetCommentsByAuthorIdResult);
        public GetCommentsByAuthorIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCommentsByAuthorIdResultInfo info)
            {
                return new GetCommentsByAuthorIdResult(MapNonNullableIGetCommentsByAuthorId_CommentsByAuthorIdNonNullableArray(info.CommentsByAuthorId, snapshot));
            }

            throw new global::System.ArgumentException("GetCommentsByAuthorIdResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByAuthorId_CommentsByAuthorId> MapNonNullableIGetCommentsByAuthorId_CommentsByAuthorIdNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var comments = new global::System.Collections.Generic.List<global::Generator.IGetCommentsByAuthorId_CommentsByAuthorId>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                comments.Add(MapNonNullableIGetCommentsByAuthorId_CommentsByAuthorId(child, snapshot));
            }

            return comments;
        }

        private global::Generator.IGetCommentsByAuthorId_CommentsByAuthorId MapNonNullableIGetCommentsByAuthorId_CommentsByAuthorId(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                return _getCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Generator.State.CommentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCommentsByAuthorIdResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> commentsByAuthorId, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CommentsByAuthorId = commentsByAuthorId;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> CommentsByAuthorId { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCommentsByAuthorIdResultInfo(CommentsByAuthorId, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, GetCommentsByAuthorId_CommentsByAuthorId_Comment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCommentsByAuthorId_CommentsByAuthorId_Comment Map(global::Generator.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCommentsByAuthorId_CommentsByAuthorId_Comment(entity.Id, entity.AuthorId, entity.PostId, entity.Content, entity.Created_At, entity.Updated_At, entity.Path);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Generator.GetCommentsByPostIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, GetCommentsByPostId_CommentsByPostId_Comment> _getCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper;
        public GetCommentsByPostIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, GetCommentsByPostId_CommentsByPostId_Comment> getCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper = getCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Generator.IGetCommentsByPostIdResult);
        public GetCommentsByPostIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCommentsByPostIdResultInfo info)
            {
                return new GetCommentsByPostIdResult(MapNonNullableIGetCommentsByPostId_CommentsByPostIdNonNullableArray(info.CommentsByPostId, snapshot));
            }

            throw new global::System.ArgumentException("GetCommentsByPostIdResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Generator.IGetCommentsByPostId_CommentsByPostId> MapNonNullableIGetCommentsByPostId_CommentsByPostIdNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var comments = new global::System.Collections.Generic.List<global::Generator.IGetCommentsByPostId_CommentsByPostId>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                comments.Add(MapNonNullableIGetCommentsByPostId_CommentsByPostId(child, snapshot));
            }

            return comments;
        }

        private global::Generator.IGetCommentsByPostId_CommentsByPostId MapNonNullableIGetCommentsByPostId_CommentsByPostId(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                return _getCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Generator.State.CommentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCommentsByPostIdResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> commentsByPostId, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CommentsByPostId = commentsByPostId;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> CommentsByPostId { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCommentsByPostIdResultInfo(CommentsByPostId, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, GetCommentsByPostId_CommentsByPostId_Comment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCommentsByPostId_CommentsByPostId_Comment Map(global::Generator.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCommentsByPostId_CommentsByPostId_Comment(entity.Id, entity.AuthorId, entity.PostId, entity.Content, entity.Created_At, entity.Updated_At, entity.Path);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class AddCommentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IAddCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Generator.IAddCommentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public AddCommentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Generator.IAddCommentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddCommentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddCommentResult Result, AddCommentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddCommentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddCommentResult, AddCommentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId addCommentId = default !;
            _entityStore.Update(session =>
            {
                addCommentId = UpdateNonNullableIAddComment_AddCommentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addComment"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddCommentResultInfo(addCommentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIAddComment_AddCommentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.CommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.ICommentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICommentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public CommentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICommentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<ICommentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICommentsResult Result, CommentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICommentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICommentsResult, CommentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> commentsId = default !;
            _entityStore.Update(session =>
            {
                commentsId = UpdateNonNullableIComments_CommentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CommentsResultInfo(commentsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIComments_CommentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var comments = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                comments.Add(UpdateNonNullableIComments_CommentsEntity(session, child, entityIds));
            }

            return comments;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIComments_CommentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.CommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByAuthorIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByAuthorIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByAuthorIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetCommentsByAuthorIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByAuthorIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCommentsByAuthorIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCommentsByAuthorIdResult Result, GetCommentsByAuthorIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCommentsByAuthorIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCommentsByAuthorIdResult, GetCommentsByAuthorIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> commentsByAuthorIdId = default !;
            _entityStore.Update(session =>
            {
                commentsByAuthorIdId = UpdateNonNullableIGetCommentsByAuthorId_CommentsByAuthorIdEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentsByAuthorId"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCommentsByAuthorIdResultInfo(commentsByAuthorIdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetCommentsByAuthorId_CommentsByAuthorIdEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var comments = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                comments.Add(UpdateNonNullableIGetCommentsByAuthorId_CommentsByAuthorIdEntity(session, child, entityIds));
            }

            return comments;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetCommentsByAuthorId_CommentsByAuthorIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.CommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class GetCommentsByPostIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByPostIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByPostIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetCommentsByPostIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByPostIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCommentsByPostIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCommentsByPostIdResult Result, GetCommentsByPostIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCommentsByPostIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCommentsByPostIdResult, GetCommentsByPostIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> commentsByPostIdId = default !;
            _entityStore.Update(session =>
            {
                commentsByPostIdId = UpdateNonNullableIGetCommentsByPostId_CommentsByPostIdEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentsByPostId"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCommentsByPostIdResultInfo(commentsByPostIdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetCommentsByPostId_CommentsByPostIdEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var comments = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                comments.Add(UpdateNonNullableIGetCommentsByPostId_CommentsByPostIdEntity(session, child, entityIds));
            }

            return comments;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetCommentsByPostId_CommentsByPostIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Generator.State.CommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Generator.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created_At")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updated_At")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "path"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentAPIClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Comment" => ParseCommentEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Comment" => FormatCommentEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public partial class CommentAPIClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CommentAPIClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.9.0.0")]
    public static partial class CommentAPIClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Generator.State.CommentAPIClientStoreAccessor> AddCommentAPIClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Generator.State.CommentAPIClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.AddCommentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.CommentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.GetCommentsByAuthorIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.GetCommentsByPostIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.CommentAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.ICommentAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Generator.State.CommentAPIClientStoreAccessor>("CommentAPIClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CommentAPIClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, global::Generator.AddComment_AddComment_Comment>, global::Generator.State.AddComment_AddComment_CommentFromCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, global::Generator.Comments_Comments_Comment>, global::Generator.State.Comments_Comments_CommentFromCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, global::Generator.GetCommentsByAuthorId_CommentsByAuthorId_Comment>, global::Generator.State.GetCommentsByAuthorId_CommentsByAuthorId_CommentFromCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Generator.State.CommentEntity, global::Generator.GetCommentsByPostId_CommentsByPostId_Comment>, global::Generator.State.GetCommentsByPostId_CommentsByPostId_CommentFromCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IAddCommentResult>, global::Generator.State.AddCommentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IAddCommentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.IAddCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IAddCommentResult>, global::Generator.State.AddCommentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Generator.IAddCommentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Generator.IAddCommentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IAddCommentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.AddCommentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.IAddCommentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.AddCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICommentsResult>, global::Generator.State.CommentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Generator.ICommentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.ICommentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.ICommentsResult>, global::Generator.State.CommentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Generator.ICommentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Generator.ICommentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.ICommentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.CommentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.ICommentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.CommentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByAuthorIdResult>, global::Generator.State.GetCommentsByAuthorIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByAuthorIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.IGetCommentsByAuthorIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByAuthorIdResult>, global::Generator.State.GetCommentsByAuthorIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Generator.IGetCommentsByAuthorIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByAuthorIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByAuthorIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.GetCommentsByAuthorIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.IGetCommentsByAuthorIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.GetCommentsByAuthorIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByPostIdResult>, global::Generator.State.GetCommentsByPostIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Generator.IGetCommentsByPostIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.IGetCommentsByPostIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByPostIdResult>, global::Generator.State.GetCommentsByPostIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Generator.IGetCommentsByPostIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByPostIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Generator.IGetCommentsByPostIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.GetCommentsByPostIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.IGetCommentsByPostIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.GetCommentsByPostIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Generator.State.CommentAPIClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.CommentAPIClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Generator.ICommentAPIClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Generator.CommentAPIClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
